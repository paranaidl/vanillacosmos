// components/Insidecontents.js

class Insidemain extends HTMLElement {
  constructor() {
    super();

    this.innerHTML = `
    <div id="content">
      <div class="button-wrapper">
        <div class="button">
          <h1>VanillaCosmos</h1>
        </div>
        <br />
          <p>
            코스모스. 메타버스 이전에 비포어메타버스, 즉 클라우드코스모스가 있었음에 계승하려 한다.
          </p>
        <br />
        <br />
        <div class="button">
          <a href="https://threejs.org/" target="_blank">ThreeJS</a>
        </div>
        <br />
        <p>
          three.js는 웹플랫폼 게임 개발과 그 홍보를 위하여 보다 인터렉티브한 3D 웹사이트를 개발할 때
          필요하다.
        </p>
        <p>
          Babylon을 익히는 것은 아직은 쓸데 없으니 신경 끄자.
        </p>
        <br /><br />
        <div class="button">
          <a href="https://vitejs-kr.github.io/" target="_blank">VITE</a>
        </div>
        <br />
        <p>
          번들러는 필요하고 심플한 parcel을 먼저 적용하고 커뮤니티가 큰 webpack을 사용해보고 최종적으로는 vite로 번들링하자.
        </p>
        <p>
          그러나, 이 사이트는 다중 html에 각각의 2개 이상의 canvas에 threeJS 테스트를 하는 것이 목적이므로 번들링은 하지 않는다.
        </p>
        <p>
          오픈된 소스를 이용한 것이므로 암호화도 할 필요 없다.
        </p>
        <br /><br />
        <div class="button">
          <a href="https://developer.mozilla.org/ko/" target="_blank">VANILLACODE</a>
        </div>
        <br />
        <p>TS는 Javascript + Type으로 JS의 superset이다.</p>
        <p>TS는 정적타입을 지원하니 컴파일 단계에서 오류를 찾아낼 수 있다.</p>
        <p>TS는 컴파일 과정에서 ES6+ 문법을 ES5 이하의 문법으로 바꿔주기 때문에 Babel의 도움 없이도 크로스브라우징 문제를 해결할 수 있다.</p>
        <p>TS의 Interface는 타입체크 외에도 새로운 타입을 정의할 수도 있고, 상속을 통한 확장을 가능하게 하며 export로 외부 파일에서도 사용할 수 있다.</p>
        <p>그러나!!! 아직은 방구석 개발자로 1인 개발만 하니 use strict만 사용하며 순수한 JS를 익히는데 집중하자.</p>
        <br /><br />
        <div class="button">
          <a href="https://svelte.dev/" target="_blank">FRAMEWORK</a>
        </div>
        <br />
        <p>
          심플한 Vue와 Nuxt, 커뮤니티가 큰 React와 Next, 빠른 Svelte & Sveltkit,
          결국은 다 해야 된다.
        </p>
        <p>Angular는 그걸 사용할 정도로 규모있는 프로젝트를 할 일도 없고 사용중인 대기업에 입사할 일도 없다.
        당연히, 그걸 만든 구글에 입사할 일도 없다. 그러니 신경 끄자.
        </p>
        <p>이 사이트의 이전 버전에서 vanillacode로만 작성하여 SPA를 구성했었다.</p>
        <p>나중을 위해 개념만 잡았다고 생각하고 일반적인 MPA로 구성하여 PWA까지만 개발하자.</p>
        <p>백엔드도 vanillacode로만 작성하는 것이 가능하긴 하다.</p>
        <p>Express를 사용하여 라우터만이라도 쉽게 설정하는 것도 괜찮다고 생각한다.</p>
        <p>그러나 일렉트론 빌드로 데스크탑 앱 서비스 계획도 고려한다면 최종적으로는 퍼블릭클라우드 서비스를 이용한 게임 서버를 만들 것이므로 nest를 익히도록 하자.</p>
        <br /><br />
        <div class="button">
          <a href="https://webassembly.org/" target="_blank">WASM & Engine</a>
        </div>
        <p>C/C++ 코드소스를 포팅할 일이 많을테니 emscripten을 알아두자.</p>
        <p>WebAssembly를 작성하겠다고 굳이 rust같은 새로운 언어를 익히는 짓은 하지말자. 차라리 AssemblyScript를 훑어보자.</p>
        <p>WebAssembly를 사용하여 특정 목적의 SPA를 만들어야 하는 상황이라면 닷넷 블레이져를 이용하자.</p>
        <p>그리 멀지 않은 미래에 WebAssembly가 모듈화되어 script type='module'로 더 쉽게 다운받고, 컴파일하고, 임포트할 수 있을때까지......</p>
        <p>Unity webgl 빌드는 신경끄자.</p>
        <p>
          2D 애니메이션이 필요할 때는 pixi 써보고 phaser3는 굳이 볼 필요는 없을 듯 하다.
        </p>
        <br /><br />
        <hr>
        <br /><br />
        <div class="button">
          <h1>SOLARCRAFT</h1>
        </div>
        <br />
        <p>
          홈월드와 서사가 비슷한 컨셉으로 시나리오를 작성했었고, AC saga라는
          타이틀의 모바일 앱으로 출시했었다.
        </p>
        <p>
          그러나 출시할 즈음에 회사 경영진의 그 문제 때문에 퇴사하게 되고 인게임 퀘스트 스토리는 전부 교체하여 최초 컨셉과는 너무 거리가 멀어진 채 출시되었다.
          물론 출시된 게임도 구글플레이 초기페이지에 뜨고 나서 몇 시간 만에 빛의 속도로 사라졌다.
        </p>
        <p>
          시나리오를 크게 3단락으로 요약하자면.
          (넷플릭스에서 승리호나 고요의바다가 나왔을 때 솔직히 좀 놀랐다. 설정이 비슷해서... 스토리를 처음 구상한 것은 2010년이었으나 기획서에 시나리오를 첨부했을 때는 2013년이었다.
            그 시절에는 비슷한 생각을 했던 사람들이 많았던 것 같다.)<br /><br />
        </p>
        <p>
          1기 요약 : AD. 2038년부터 달의 뒷면에 기지를 짓고 클론의 배양 생산과 스페이스드론을 개발하던 시기.<br />
          1세기 가량 이어진 건설시기에 달의 남극에서 내부로 진입할 수 있는 거대한 게이트를 발견하게 된다.
          늘 그렇듯이 더 이상 정부와 국가간 연합이 아닌 국제적 대기업의 개입이 시작되었고 달의 내부에 건설된 시설의 조사와 연구는 특정 세력이 독점하게 된다.
          당연히 발견된 고대의 오파츠에 대한 연구도 이루어진다.
          이 시기는 지구와 달 사이에 개발과 생산물에 대한 이동이 많아지면서 궤도 상 중간 기지도 많아지게 되었고 결국 우주 폐기물을 궤도 상에 방출하는 상황도 많아졌다.
          궤도상에서 우주화물선이 폐기물과의 충돌때문에 폭발과 사고가 끊임없이 일어나던 시기다.<br /><br />
        </p>
        <p>
          2기 요약 : 심우주 항해와 AC 항성계 도착과 상륙 시기.<br />
          고대의 오파츠 연구를 통하여 기존의 핵융합 엔진을 대체할 새로운 이온융합 엔진 개발이 마무리 되고 함선의 장갑을 보완할 메타물질도 개발이 완료되어 수십년간 지지부진했던 머더쉽의 건조가 마무리되어 출항하게 된다.
          (지금은 이름이 바뀌었지만 그 당시에는 알파 센타우리 항성계였다. 그래서 게임 타이틀도 AC saga였다.)
          항해를 위해 탑승한 승객들은 모두 특정 유전자를 강화한 클론들이며 오랜 항해 기간 동안 동면을 하게 된다.
          머더쉽의 항해는 '마고'로 불리게 된 AI와 작업용 드론 들의 몫이었다.<br /><br />
        </p>
        <p>
          3기 요약 : 머더쉽의 '마고'와 그 후계 AI들에 대항한 드론 들의 반란과 전쟁, 외계의 침공 시기.<br />
          지구 시간으로 40여 년간 항해를 마치고 상륙 후 실제로 동면에서 깨어난 클론들은 1년도 지나지 않아 90% 가까이 사망하게 되는데 원인은 바이러스였다.
          '마고'는 그 수명이 다하여 2대 머더쉽 AI '아만과 나반'으로 계승되었는데 제 1 원칙을 지키기 위하여 드론들을 소모 시키면서 클론을 번성시키려고 했던 부분이 드론들의 대규모 반란으로 이어졌다.
          클론은 비록 인간의 모습을 하고는 있지만 지구로부터의 기원에 대해서는 열악한 조건에서 제대로 교육받지 못하여 AI에 불과한 '아만과 나반'을 자신들의 창조주로 숭배하는 상황으로 흘러간다.
          (이 부분부터의 시기를 AC saga로 출시했던 것인데 10년 전에 망한 그 게임이다.)<br /><br />
        </p>
        <p>
          원래 내 의도대로 달 개척 시기부터의 시나리오를 웹 플랫폼 앱으로 개발하려 한다.
        </p>
        <br /><br />
        <div class="button">
          <h1>GHOSTWOLF</h1>
        </div>
        <br />
        <p>HUD를 가진 FPS와 일반적인 TPS 시점을 스테이지에 따라 선택하여 플레이하는 슈팅 게임이다.</p>
        <p>슈팅 게임이지만 전투의 가장 큰 컨셉은 사운드다.</p>
        <p>AC saga의 1기 시대에 활약했던 Anonymous는 국제적 대기업들의 컨소시엄인 SM에 대항하기 위하여 전투함을 개발했다.</p>
        <p>궤도상에서 화물 약탈로 그 이름을 알렸으나 1기 말기에는 연방과 SM의 함대를 상대로 무자비한 파괴를 일삼았다.</p>
        <p>탁월한 전투 능력과 신출귀몰한 전술로 함명은 자칭 타칭 'Ghostwolf'로 불리우게 되었다.</p>
        <p>모항은 화성의 북반구로 알려졌지만 지구의 심해에서도 장기간 순양했던 기록이 있었다.</p>
        <br /><br />
        <div class="button">
          <h1>CACOPHONIA</h1>
        </div>
        <br />
        <p>"불협화음의 세계"라는 이세계물 컨셉 게임이다.</p>
        <p>
          죽은 것으로 알려진 뮤지션들이 이세계에서 좀비, 구울, 데몬 등등 온갖
          괴물들을 사냥하는 것이 주요 게임 컨텐츠다.
        </p>
        <p>
          엘비스프레슬리, 지미헨드릭스, 브라이언존스, 짐모리슨, 존레논, 랜디로즈, 커트코베인, 다임백대럴 그외 잊혀진 많은 이들을 게임에서 만날 수 있다.
        </p>
        <br /><br />
        <div class="button">
          <h1>LODOLS</h1>
        </div>
        <br />
        <p>게임 타이틀에서 이미 눈치챘을 것이다.</p>
        <p>더 이상의 설명은 생략한다.</p>
        <br /><br />
        <br /><br />
        <br /><br />
        <br /><br />
        <br /><br />
      </div>
    </div>
    `;
  }

  connectedCallback() {}
}

customElements.define("main-inside", Insidemain);
